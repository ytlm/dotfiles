" custom setting          ----------------------------------------         {{{
set number relativenumber
set wrap
set shiftround
set showmatch
set matchtime=1
set shiftwidth=4
set tabstop=4
set expandtab
set conceallevel=0

set noswapfile
set nobackup
set nowritebackup
set smartindent
set autoindent

set colorcolumn=81
highlight ColorColumn ctermbg=0 guibg=lightgrey

set history=1000
" set ruler
" set cursorline
set scrolloff=1
set laststatus=2
set backspace=indent,eol,start
set hlsearch

set showcmd

set nocompatible

set updatetime=300

set signcolumn=yes

" set ignorecase smartcase

set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8

set mouse-=a

set foldmethod=marker

filetype plugin indent on

" set shortmess+=c
" set t_ti= t_te=

set clipboard=unnamed

" set spell
" set spelllang=en_us
" inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

" }}}

" statusline          -------------------------------------------          {{{
set statusline=%F                         " full file path, with 25 width
set statusline+=\ %m\                     " modified flag
set statusline+=[TYPE=%Y]                 " file type
set statusline+=[POS:%v-%l/%L]            " cursor pos, column number, curr linenumber/total linenumber
set statusline+=\ %P                      " percentage
" set statusline+=%=                        " right aligment
" }}}

" keymapping          -------------------------------------------         {{{
" replace double @ to email
iabbrev @@ ytlm.lv@gmail.com

let mapleader=','
let maplocalleader='\\'

noremap <leader>sv :source $MYVIMRC<cr>
noremap <leader>ev :split $MYVIMRC<cr>

noremap H 0
noremap L $

inoremap <c-d> <esc>ddOi

" press <space> to select a word
nnoremap <space> viw

inoremap jk <esc>

" surround the word with quotes
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>` viw<esc>a`<esc>hbi`<esc>lel

" surround the select word with quores
vnoremap <leader>" <esc>a"<esc>`<i"<esc>e
vnoremap <leader>' <esc>a'<esc>`<i'<esc>e
vnoremap <leader>` <esc>a`<esc>`<i`<esc>e

" move to next line in normal mode
nnoremap <leader>- ddp
" move to previous line in normal mode
nnoremap <leader>_ ddkP

" delete a line in insert mode
inoremap <leader><C-d> <esc>ddi

" change word to upper in insert mode
inoremap <leader><C-u> <esc>viwUea
" change word to upper in normal mode
nnoremap <leader><C-u> viwU


" d y c
onoremap p i(

onoremap in( :<C-u>normal! f(vi(<cr>
onoremap il( :<C-u>normal! F(vi(<cr>

" fzf
noremap <C-p> :FZF<cr>

" move split window
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

" resize window
nnoremap <M-j> :resize +5<cr>
nnoremap <M-k> :resize -5<cr>
nnoremap <M-h> :vertical resize -5<cr>
nnoremap <M-l> :vertical resize +5<cr>


function! LinenumberToggle()
    set number!
    set relativenumber!
endfunc

nnoremap <leader>nl :call LinenumberToggle()<cr>

nnoremap <leader>w :w<cr>
inoremap <leader>w <esc>:w<cr>a

nnoremap <leader>q :wq<cr>
inoremap <leader>q <esc>:wq<cr>

nnoremap <leader>z :q!<cr>
inoremap <leader>z <esc>:q!<cr>

nnoremap <leader>f zfi{
nnoremap <leader>F zo

" }}}

" vim-plug         -----------------------------------------------         {{{
"

" auto install vim-plug
if empty(glob("~/.vim/autoload/plug.vim"))

    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
            \ https://raw.github.com/junegunn/vim-plug/master/plug.vim

    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC

endif

call plug#begin('~/.vim/plugged')

    " fzf
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'

    " nerdcommenter
    Plug 'scrooloose/nerdcommenter'

    " solarized
    " Plug 'altercation/vim-colors-solarized', { 'do': 'ln -s ~/.vim/plugged/vim-colors-solarized/colors ~/.vim/colors' }

    " monokai
    " Plug 'sickill/vim-monokai', { 'do': 'ln -s ~/.vim/plugged/vim-colors-solarized/colors ~/.vim/colors' }

    " vim-gutentags
    Plug 'ludovicchabant/vim-gutentags'

    " tabular
    Plug 'godlygeek/tabular'

    " vim-easy-align
    Plug 'junegunn/vim-easy-align'

    " nerdtree
    Plug 'scrooloose/nerdtree'

    " ag
    Plug 'rking/ag.vim'

    " tagbar
    Plug 'majutsushi/tagbar'

    " indentLine
    Plug 'Yggdroot/indentLine'

    " vim-go
    Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

    " vim-rust
    Plug 'rust-lang/rust.vim'

    " coc.nvim for lsp
    Plug 'neoclide/coc.nvim', {'branch': 'release'}

call plug#end()
" }}}

" vim-go       ----------------------------------          {{{

" }}}

" indentLine setting          ----------------------------------          {{{
noremap <leader>dl :IndentLinesToggle<cr>

autocmd FileType json,markdown let g:indentLine_conceallevel = 0
autocmd FileType javascript,python,c,cpp,java,vim,shell let g:indentLine_conceallevel = 2
" }}}

" tagbar setting          --------------------------------------          {{{

" need "Exuberant Ctags"
let tagbar_ctags_bin='/usr/bin/ctags'
nnoremap tb :TagbarToggle<CR>

let g:tagbar_sort = 0

" }}}

" vim-gutentags setting          --------------------------------------          {{{

let s:vim_tags = expand('~/.cache/vim-tags')

let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

set tags=./.tags;,.tags
" ctags -R --fields=+niazS --extra=+q --C++-kinds=+px --C-kinds=+px ./
let g:gutentags_ctags_executable = '/usr/bin/ctags'
let g:gutentags_ctags_tagfile = '.tags'
let g:gutentags_ctags_extra_args  = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--C++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--C-kinds=+px']

let g:gutentags_cache_dir = s:vim_tags

let g:gutentags_trace = 0


if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" }}}

" ag setting          ----------------------------------          {{{
" need "yum install the_silver_searcher"
let g:ag_prg='/usr/bin/ag -f --nogroup --nocolor --column --vimgrep'
let g:ag_working_path_mode="r"

nnoremap <c-f> :Ag<space><cword><cr>
nnoremap <c-h> :Ag<space>
" }}}

" nerdcommenter setting          --------------------------------          {{{

" default mapping
" [count]<leader>cc
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDAltDelims_java = 1
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
" }}}

" nerdtree setting              --------------------------------           {{{

" close window  only NERDTree
augroup nerdtree

    autocmd!

    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

augroup END

" map shortcut
nnoremap nt :NERDTreeToggle<cr>

" }}}

" coc ----------------------------------------          {{{

" :cc replace :CocConfig
function! SetupCommandAbbrs(from, to)
    exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction

call SetupCommandAbbrs('cc', 'CocConfig')


" <Tab> trigger completion
function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1] =~# '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
else
    inoremap <silent><expr> <c-@> coc#refresh()
endif

highlight CocErrorFloat ctermfg=0

" }}}

" group autocmd          ----------------------------------------          {{{

augroup quickfixClose
    " autocmd !
    autocmd WinEnter * if winnr("$") == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix" | q | endif
    autocmd BufEnter * if 0 == len(filter(range(1, winnr('$')), 'empty(getbufvar(winbufnr(v:val), "&bt"))')) | qa! | endif
augroup END


augroup main

    autocmd!

    " delete whitespace
    autocmd BufWritePre * %s/\s\+$//e

    " auto open the last edit line
    autocmd BufReadPost * if line("'\"") > 1 && line ("'\"") <= line("$") | exe "normal! g'\"" | endif

augroup END

" }}}

" vimscript file setting          -------------------------------          {{{
augroup filetypeVim

    autocmd!
    autocmd FileType vim setlocal foldmethod=marker

augroup END
" }}}

" auto write file header          -------------------------------          {{{
autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"

function! AutoSetFileHead()
    if &filetype == 'sh'
        call append(0, '#!/usr/bin/env bash')
        call cursor(2, 0, 0)
    endif

    if &filetype == 'python'
        call append(0, '#!/usr/bin/env python')
        call append(1, '# _*_ encoding: utf-8 _*_')
        call cursor(3, 0, 0)
    endif
endfunc
" }}}

" theme setting          ----------------------------------------          {{{
syntax on

" if exists('$TMUX')
" set term=screen
" endif

" set t_Co=256
" let g:solarized_termcolors=16

" set background=dark
" colorscheme solarized
" colorscheme dracula
" }}}

" vim-easy-align ---------------------------------------            {{{
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
" }}}

" tabular            ---------------------------------------            {{{
if exists(':Tabularize')
    nnoremap <Leader>a= :Tabularize /=<CR>
    vnoremap <Leader>a= :Tabularize /=<CR>
    nnoremap <Leader>a: :Tabularize /:\zs<CR>
    vnoremap <Leader>a: :Tabularize /:\zs<CR>
endif

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
    let p = '^\s*|\s.*\s|\s*$'
    if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
        let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
        let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
        Tabularize/|/l1
        normal! 0
        call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
    endif
endfunc
" }}}
