# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

machine=$(uname)

shopt -s histappend

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# export TERM="screen-256color"
export TERM="xterm"

export EDITOR=vim

# User specific aliases and functions

# ls
alias ls='ls --color=always'
alias l='ls -l'
alias ll='ls -l'
alias la='ls -la'
alias lt='ls -lt'
alias lh='ls -lh'

# vim
alias vi='vim'

# emacs
alias ee='emacs -nw'

# git
alias gpa="git pull --all"
alias gsu="git submodule update"
alias gdf="git diff"
alias gst="git status"
alias gco="git checkout"
alias gad="git add"
alias glg="git log --graph --pretty=format:\"%Cred%H%Creset : %s : %Cblue%an%Creset%Cgreen(%cr)%Creset\""

alias copy='xsel --clipboard --input'
alias paste='xsel --clipboard --output'

# commands

psg() {
    ps -ef | grep $@ | grep -v grep
}

# urlencode urldecode
urlencode() {
    # urlencode <string>
    old_lc_collate=$LC_COLLATE
    LC_COLLATE=C

    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "..%s.." "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done

    LC_COLLATE=$old_lc_collate
}

urldecode() {
    # urldecode <string>

    local url_encoded="${1//+/ }"
    printf '%b' "${url_encoded//%/\\x}"
}

function upper() {
    echo $1 | tr '[:lower:]' '[:upper:]'
}

function lower() {
    echo $1 | tr '[:upper:]' '[:lower:]'
}


# export
# export JAVA_HOME=/usr/java/jdk1.8.0_121
# export JRE_HOME=${JAVA_HOME}/jre
# export CLASS_PATH=.:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar:${JRE_HOME}/lib

# added by travis gem
[ -f ~/.travis/travis.sh ] && source ~/.travis/travis.sh

# autojump
[[ -s /usr/share/autojump/autojump.bash ]] && source /usr/share/autojump/autojump.bash

# fzf
[[ -f ~/.fzf/shell/key-bindings.bash ]] && source ~/.fzf/shell/key-bindings.bash
[[ -f /usr/share/doc/fzf/examples/key-bindings.bash ]] && source /usr/share/doc/fzf/examples/key-bindings.bash

# git
[[ -f /usr/share/git/completion/git-completion.bash ]] && source /usr/share/git/completion/git-completion.bash

# bazel
[[ -f /usr/local/lib/bazel/bin/bazel-complete.bash ]] && source /usr/local/lib/bazel/bin/bazel-complete.bash

# tar
function tt() {
    if [ -f "$1" ] ; then
        case $1 in
            *.tar.bz2)          tar -jxvf "$1"      ;;
            *.tar.gz)           tar -xvf "$1"       ;;
            *.tar.xz)           tar -Jxvf "$1"      ;;
            *.tar)              tar -xvf "$1"       ;;
            *.tbz2)             tar -xjf "$1"       ;;
            *.tgz|*.pkg)        tar -xzf "$1"       ;;
            *.bz2)              bunzip2 -kdvf "$1"  ;;
            *.rar)              unrar x "$1"        ;;
            *.gz)               gunzip "$1"         ;;
            *.zip)              unzip "$1"          ;;
            *.war)              jar -xf "$1"        ;;
            *.Z)                uncompress "$1"     ;;
            *.7Z)               7za x "$1"          ;;
            *.7z)               7za x "$1"          ;; # install p7zip
            *.deb)              ar -vx "$1"         ;;
            *)            echo "'$1' cannot be extracted via '$0'" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# /etc/environment
export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS=@im=fcitx

export DEAD=/dev/null

export LESS="-eirMX"

if [ "$machine" != "Darwin" ]; then
    eval $(dircolors ~/.dircolors/dircolors.ansi-light)
fi


# export LC_CTYPE=en_US.UTF-8
export LC_ALL=C

# export http_proxy=10.23.73.133:1087
# export https_proxy=10.23.73.133:1087

# source "/root/Work/emsdk/emsdk_env.sh"

export PROTOBUF=/usr/local/protobuf
export PATH=$PROTOBUF/bin:/usr/local/go/bin:/root/go/bin:$PATH

. "$HOME/.cargo/env"

# seabuild() { docker run -v $HOME/Work/seastar/:/seastar -u $(id -u):$(id -g) -w /seastar -t seastar-dev "$@"; }
seabuild() { docker run -v $HOME/Work/seastar/:/seastar -u $(id -u):$(id -g) -w /seastar -t seastar-dev:v0.0.1 "$@"; }

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

## for bazel
export BAZEL_HOME="/usr/local/bazel"

export PATH="$BAZEL_HOME/bin:$PATH"

# for bash complete
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"


export LC_ALL="en_US.UTF-8"

function proxy_on() {
    export http_proxy=http://127.0.0.1:7890
    export https_proxy=http://127.0.0.1:7890
    export no_proxy=127.0.0.1,localhost
    export HTTP_PROXY=http://127.0.0.1:7890
    export HTTPS_PROXY=http://127.0.0.1:7890
    export NO_PROXY=127.0.0.1,localhost
    echo -e "\033[32m[√] 已开启代理\033[0m"
}

# 关闭系统代理
function proxy_off(){
    unset http_proxy
    unset https_proxy
    unset no_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset NO_PROXY
    echo -e "\033[31m[×] 已关闭代理\033[0m"
}

alias 'curl-http3'='docker run -t --rm badouralix/curl-http3'

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

OLD_PS1=$PS1

R='\[\e[38;2;255;100;100m\]'
G='\[\e[38;2;100;255;100m\]'
B='\[\e[38;2;100;100;255m\]'
W='\[\e[0m\]'
PS1="$R\u$W@$B\h$W:$G\w$W\$ "

# 启用即时写入历史记录到文件
export HISTTIMEFORMAT='%F %T  '

export HISTCONTROL=ignoredups:erasedups  # 忽略重复命令并删除历史记录中的重复项
export HISTFILESIZE=1000000              # 设置历史记录文件大小
export HISTSIZE=100000                   # 设置最大命令历史记录数

export HISTFILE=~/.bash_history          # 指定历史文件的存储路径

# 同步历史记录到文件
shopt -s histappend                      # 允许追加历史记录，而不是覆盖文件
export PROMPT_COMMAND="history -a; history -n; $PROMPT_COMMAND"


. "$HOME/.local/bin/env"

[[ -s "/root/.gvm/scripts/gvm" ]] && source "/root/.gvm/scripts/gvm"
unset -f cd

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
